// S_graph = Simplified forward graph
digraph Simple_CNN_S_graph {
	"_0_-- inputs --" [label="" style=dashed]
	_0___10_input [label="__10_input = torch._convolution(x, self.conv1.weight, self.conv1.bias, [1, 1], [0, 0], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	_0___7_input [label="__7_input = torch.relu(__10_input)"]
	_0___16_input0 [label="__16_input0 = torch.max_pool2d(__7_input, [2, 2], [2, 2], [0, 0], [1, 1])"]
	_0___23_input [label="__23_input = torch._convolution(__16_input0, self.conv2.weight, self.conv2.bias, [1, 1], [0, 0], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	_0___28_input0 [label="__28_input0 = torch.relu(__23_input)"]
	_0___30_x [label="__30_x = torch.max_pool2d(__28_input0, [2, 2], [2, 2], [0, 0], [1, 1])
__29_input1 = torch.Tensor.view(__30_x, [(- 1), 400])"]
	_0___39_fv [label="__39_fv = torch.nn.functional.linear(__29_input1, self.fc1.weight, self.fc1.bias)"]
	_0___36_input2 [label="__36_input2 = torch.relu(__39_fv)"]
	_0___43_fv [label="__43_fv = torch.nn.functional.linear(__36_input2, self.fc2.weight, self.fc2.bias)"]
	_0___40_input3 [label="__40_input3 = torch.relu(__43_fv)"]
	_0___46_fv [label="__46_fv = torch.nn.functional.linear(__40_input3, self.fc3.weight, self.fc3.bias)"]
	"_0_-- inputs --" -> _0___10_input [label=x]
	_0___10_input -> _0___7_input [label=__10_input]
	_0___7_input -> _0___16_input0 [label=__7_input]
	_0___16_input0 -> _0___23_input [label=__16_input0]
	_0___23_input -> _0___28_input0 [label=__23_input]
	_0___28_input0 -> _0___30_x [label=__28_input0]
	_0___30_x -> _0___39_fv [label=__29_input1]
	_0___39_fv -> _0___36_input2 [label=__39_fv]
	_0___36_input2 -> _0___43_fv [label=__36_input2]
	_0___43_fv -> _0___40_input3 [label=__43_fv]
	_0___40_input3 -> _0___46_fv [label=__40_input3]
	_0_input [label=INPUT color=green style=dashed]
	_0_output [label=OUTPUT color=green style=dashed]
	_0_input -> "_0_-- inputs --" [label=x]
	_0___46_fv -> _0_output [label=__46_fv]
}
