// D_graph = forward graph
digraph resnet101_D_graph {
	x [label="x = 'INPUT'" color=blue]
	__13_input [label="__13_input = torch._convolution(x, self.conv1.weight, None, [2, 2], [3, 3], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__25_input [label="__25_input = torch.batch_norm(__13_input, self.bn1.weight, self.bn1.bias, self.bn1.running_mean, self.bn1.running_var, True, 0.1, 1e-05, True)"]
	__26_fv [label="__26_fv = torch.relu_(__25_input)"]
	__28_input [label="__28_input = torch.max_pool2d(__26_fv, [3, 3], [2, 2], [1, 1], [1, 1])"]
	__43_input [label="__43_input = torch._convolution(__28_input, self.layer1[0].conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__55_input [label="__55_input = torch.batch_norm(__43_input, self.layer1[0].bn1.weight, self.layer1[0].bn1.bias, self.layer1[0].bn1.running_mean, self.layer1[0].bn1.running_var, True, 0.1, 1e-05, True)"]
	__57_fv [label="__57_fv = torch.relu_(__55_input)"]
	__59_input [label="__59_input = torch._convolution(__57_fv, self.layer1[0].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__72_out [label="__72_out = torch.batch_norm(__59_input, self.layer1[0].bn2.weight, self.layer1[0].bn2.bias, self.layer1[0].bn2.running_mean, self.layer1[0].bn2.running_var, True, 0.1, 1e-05, True)"]
	__64_input [label="__64_input = torch.Tensor.add_(__72_out, __28_input)"]
	__73_fv [label="__73_fv = torch.relu_(__64_input)"]
	__81_input [label="__81_input = torch._convolution(__73_fv, self.layer1[1].conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__93_input [label="__93_input = torch.batch_norm(__81_input, self.layer1[1].bn1.weight, self.layer1[1].bn1.bias, self.layer1[1].bn1.running_mean, self.layer1[1].bn1.running_var, True, 0.1, 1e-05, True)"]
	__95_fv [label="__95_fv = torch.relu_(__93_input)"]
	__97_input [label="__97_input = torch._convolution(__95_fv, self.layer1[1].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__110_out [label="__110_out = torch.batch_norm(__97_input, self.layer1[1].bn2.weight, self.layer1[1].bn2.bias, self.layer1[1].bn2.running_mean, self.layer1[1].bn2.running_var, True, 0.1, 1e-05, True)"]
	__102_input [label="__102_input = torch.Tensor.add_(__110_out, __73_fv)"]
	__111_fv [label="__111_fv = torch.relu_(__102_input)"]
	__124_input [label="__124_input = torch._convolution(__111_fv, self.layer2[0].conv1.weight, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__136_input [label="__136_input = torch.batch_norm(__124_input, self.layer2[0].bn1.weight, self.layer2[0].bn1.bias, self.layer2[0].bn1.running_mean, self.layer2[0].bn1.running_var, True, 0.1, 1e-05, True)"]
	__138_fv [label="__138_fv = torch.relu_(__136_input)"]
	__140_input [label="__140_input = torch._convolution(__138_fv, self.layer2[0].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__153_out [label="__153_out = torch.batch_norm(__140_input, self.layer2[0].bn2.weight, self.layer2[0].bn2.bias, self.layer2[0].bn2.running_mean, self.layer2[0].bn2.running_var, True, 0.1, 1e-05, True)"]
	__158_input [label="__158_input = torch._convolution(__111_fv, self.layer2[0].downsample[0].weight, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__170_identity [label="__170_identity = torch.batch_norm(__158_input, self.layer2[0].downsample[1].weight, self.layer2[0].downsample[1].bias, self.layer2[0].downsample[1].running_mean, self.layer2[0].downsample[1].running_var, True, 0.1, 1e-05, True)"]
	__145_input [label="__145_input = torch.Tensor.add_(__153_out, __170_identity)"]
	__171_fv [label="__171_fv = torch.relu_(__145_input)"]
	__179_input [label="__179_input = torch._convolution(__171_fv, self.layer2[1].conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__191_input [label="__191_input = torch.batch_norm(__179_input, self.layer2[1].bn1.weight, self.layer2[1].bn1.bias, self.layer2[1].bn1.running_mean, self.layer2[1].bn1.running_var, True, 0.1, 1e-05, True)"]
	__193_fv [label="__193_fv = torch.relu_(__191_input)"]
	__195_input [label="__195_input = torch._convolution(__193_fv, self.layer2[1].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__208_out [label="__208_out = torch.batch_norm(__195_input, self.layer2[1].bn2.weight, self.layer2[1].bn2.bias, self.layer2[1].bn2.running_mean, self.layer2[1].bn2.running_var, True, 0.1, 1e-05, True)"]
	__200_input [label="__200_input = torch.Tensor.add_(__208_out, __171_fv)"]
	__209_fv [label="__209_fv = torch.relu_(__200_input)"]
	__221_input [label="__221_input = torch._convolution(__209_fv, self.layer3[0].conv1.weight, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__233_input [label="__233_input = torch.batch_norm(__221_input, self.layer3[0].bn1.weight, self.layer3[0].bn1.bias, self.layer3[0].bn1.running_mean, self.layer3[0].bn1.running_var, True, 0.1, 1e-05, True)"]
	__235_fv [label="__235_fv = torch.relu_(__233_input)"]
	__237_input [label="__237_input = torch._convolution(__235_fv, self.layer3[0].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__250_out [label="__250_out = torch.batch_norm(__237_input, self.layer3[0].bn2.weight, self.layer3[0].bn2.bias, self.layer3[0].bn2.running_mean, self.layer3[0].bn2.running_var, True, 0.1, 1e-05, True)"]
	__255_input [label="__255_input = torch._convolution(__209_fv, self.layer3[0].downsample[0].weight, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__267_identity [label="__267_identity = torch.batch_norm(__255_input, self.layer3[0].downsample[1].weight, self.layer3[0].downsample[1].bias, self.layer3[0].downsample[1].running_mean, self.layer3[0].downsample[1].running_var, True, 0.1, 1e-05, True)"]
	__242_input [label="__242_input = torch.Tensor.add_(__250_out, __267_identity)"]
	__268_fv [label="__268_fv = torch.relu_(__242_input)"]
	__276_input [label="__276_input = torch._convolution(__268_fv, self.layer3[1].conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__288_input [label="__288_input = torch.batch_norm(__276_input, self.layer3[1].bn1.weight, self.layer3[1].bn1.bias, self.layer3[1].bn1.running_mean, self.layer3[1].bn1.running_var, True, 0.1, 1e-05, True)"]
	__290_fv [label="__290_fv = torch.relu_(__288_input)"]
	__292_input [label="__292_input = torch._convolution(__290_fv, self.layer3[1].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__305_out [label="__305_out = torch.batch_norm(__292_input, self.layer3[1].bn2.weight, self.layer3[1].bn2.bias, self.layer3[1].bn2.running_mean, self.layer3[1].bn2.running_var, True, 0.1, 1e-05, True)"]
	__297_input [label="__297_input = torch.Tensor.add_(__305_out, __268_fv)"]
	__306_fv [label="__306_fv = torch.relu_(__297_input)"]
	__319_input [label="__319_input = torch._convolution(__306_fv, self.layer4[0].conv1.weight, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__331_input [label="__331_input = torch.batch_norm(__319_input, self.layer4[0].bn1.weight, self.layer4[0].bn1.bias, self.layer4[0].bn1.running_mean, self.layer4[0].bn1.running_var, True, 0.1, 1e-05, True)"]
	__333_fv [label="__333_fv = torch.relu_(__331_input)"]
	__335_input [label="__335_input = torch._convolution(__333_fv, self.layer4[0].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__348_out [label="__348_out = torch.batch_norm(__335_input, self.layer4[0].bn2.weight, self.layer4[0].bn2.bias, self.layer4[0].bn2.running_mean, self.layer4[0].bn2.running_var, True, 0.1, 1e-05, True)"]
	__353_input [label="__353_input = torch._convolution(__306_fv, self.layer4[0].downsample[0].weight, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__365_identity [label="__365_identity = torch.batch_norm(__353_input, self.layer4[0].downsample[1].weight, self.layer4[0].downsample[1].bias, self.layer4[0].downsample[1].running_mean, self.layer4[0].downsample[1].running_var, True, 0.1, 1e-05, True)"]
	__340_input [label="__340_input = torch.Tensor.add_(__348_out, __365_identity)"]
	__366_fv [label="__366_fv = torch.relu_(__340_input)"]
	__374_input [label="__374_input = torch._convolution(__366_fv, self.layer4[1].conv1.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__386_input [label="__386_input = torch.batch_norm(__374_input, self.layer4[1].bn1.weight, self.layer4[1].bn1.bias, self.layer4[1].bn1.running_mean, self.layer4[1].bn1.running_var, True, 0.1, 1e-05, True)"]
	__388_fv [label="__388_fv = torch.relu_(__386_input)"]
	__390_input [label="__390_input = torch._convolution(__388_fv, self.layer4[1].conv2.weight, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True, True)"]
	__403_out [label="__403_out = torch.batch_norm(__390_input, self.layer4[1].bn2.weight, self.layer4[1].bn2.bias, self.layer4[1].bn2.running_mean, self.layer4[1].bn2.running_var, True, 0.1, 1e-05, True)"]
	__395_input [label="__395_input = torch.Tensor.add_(__403_out, __366_fv)"]
	__404_fv [label="__404_fv = torch.relu_(__395_input)"]
	__405_x [label="__405_x = torch.nn.functional.adaptive_avg_pool2d(__404_fv, [1, 1])"]
	__407_input [label="__407_input = torch.flatten(__405_x, 1)"]
	__410_fv [label="__410_fv = torch.nn.functional.linear(__407_input, self.fc.weight, self.fc.bias)" color=red]
	x -> __13_input
	__13_input -> __25_input
	__25_input -> __26_fv
	__26_fv -> __28_input
	__28_input -> __43_input
	__43_input -> __55_input
	__55_input -> __57_fv
	__57_fv -> __59_input
	__59_input -> __72_out
	__72_out -> __64_input
	__28_input -> __64_input
	__64_input -> __73_fv
	__73_fv -> __81_input
	__81_input -> __93_input
	__93_input -> __95_fv
	__95_fv -> __97_input
	__97_input -> __110_out
	__73_fv -> __102_input
	__110_out -> __102_input
	__102_input -> __111_fv
	__111_fv -> __124_input
	__124_input -> __136_input
	__136_input -> __138_fv
	__138_fv -> __140_input
	__140_input -> __153_out
	__111_fv -> __158_input
	__158_input -> __170_identity
	__153_out -> __145_input
	__170_identity -> __145_input
	__145_input -> __171_fv
	__171_fv -> __179_input
	__179_input -> __191_input
	__191_input -> __193_fv
	__193_fv -> __195_input
	__195_input -> __208_out
	__208_out -> __200_input
	__171_fv -> __200_input
	__200_input -> __209_fv
	__209_fv -> __221_input
	__221_input -> __233_input
	__233_input -> __235_fv
	__235_fv -> __237_input
	__237_input -> __250_out
	__209_fv -> __255_input
	__255_input -> __267_identity
	__250_out -> __242_input
	__267_identity -> __242_input
	__242_input -> __268_fv
	__268_fv -> __276_input
	__276_input -> __288_input
	__288_input -> __290_fv
	__290_fv -> __292_input
	__292_input -> __305_out
	__305_out -> __297_input
	__268_fv -> __297_input
	__297_input -> __306_fv
	__306_fv -> __319_input
	__319_input -> __331_input
	__331_input -> __333_fv
	__333_fv -> __335_input
	__335_input -> __348_out
	__306_fv -> __353_input
	__353_input -> __365_identity
	__348_out -> __340_input
	__365_identity -> __340_input
	__340_input -> __366_fv
	__366_fv -> __374_input
	__374_input -> __386_input
	__386_input -> __388_fv
	__388_fv -> __390_input
	__390_input -> __403_out
	__403_out -> __395_input
	__366_fv -> __395_input
	__395_input -> __404_fv
	__404_fv -> __405_x
	__405_x -> __407_input
	__407_input -> __410_fv
}
